}
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
if (i != j) plot(iris[,i], iris[,j], pch=19, cex=0.5,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
if (i == j) hist(iris[,i], main="", col = "blue")
}
}
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
if (i != j) plot(iris[,i], iris[,j], pch=19, cex=0.5,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
if (i == j) hist(iris[,i], main="", col = "gray")
}
}
plot(InsectSprays$count)
dev.off()
plot(InsectSprays$count)
plot(InsectSprays$count, col = "white")
lines(InsectSprays$count)
?points
rep?
d
?rep
rep(1,10)
points(rep(1, 10), 1:10, pch = 19)
plot(InsectSprays$count,col="white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
if (thisCount > 0) points(rep(i,thisCount),1:thisCount,pch=19)
}
plot(InsectSprays$count,col="white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) text(rep(i,thisCount),1:thisCount,thisSpray)
}
abline(v=seq(0.5,72.5,by=12))
for (i in 1:nrow(InsectSprays)) {
thisCount = floor(InsectSprays$count/3)[i]
if (thisCount > 0) points(rep(i, thisCount), 1:thisCount, pch = 19)
}
plot(floor(InsectSprays$count/3))
for (i in 1:nrow(InsectSprays)) {
thisCount = floor(InsectSprays$count/3)[i]
if (thisCount > 0) points(rep(i, thisCount), 1:thisCount, pch = 19)
}
for (i in 1:nrow(InsectSprays)) {
thisCount = floor(InsectSprays$count/3)[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) points(rep(i,thisCount),1:thisCount,pch=19)
fracPart = (InsectSprays$count/3)[i] -
floor(InsectSprays$count/3)[i]
points(i,thisCount+1,pch=19,cex=fracPart)
}
for (i in 1:nrow(InsectSprays)) {
thisCount = floor(InsectSprays$count/3)[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) points(rep(i,thisCount), 1:thisCount, pch = 19)
fracPart = (InsectSprays$count/3)[i] -
floor(InsectSprays$count/3)[i]
points(i,thisCount+1, pch = 19, cex = fracPart, col = "gray")
}
ap <- matrix(as.numeric(AirPassengers),ncol=12)
rownames(ap) <- month.abb
colnames(ap) <- 1949:1960
head(ap)
AirPassengers
flyers_year <- apply(ap, 1, sum)
flyers_month <- apply(ap, 2, sum)
flyers_year
flyers_month
?apply
apply(ap, 1, sum)
sum(ap[,1])
ap[,1]
flyers_year <- apply(ap, 2, sum)
flyers_month <- apply(ap, 1, sum)
ap
flyers_year
sum(ap$1949)
sum(as.data.frame(ap$1949))
ap_df <- as.data.frame(ap)
sum(ap_df$`1949`)
flyers_month
head(ap_df)
names(ap_sf)
names(ap_df)
plot(ap_df[1], ap_df$`1949`)
plot(ap_df$[1], ap_df$`1949`)
plot(ap_df[1,], ap_df$`1949`)
plot(ap_df[,1], ap_df$`1949`)
plot(1:12, ap[,1])
plot(1:12, ap[,1], col = "white", axes = FALSE)
axis(2)
plot(1:12, ap[,1], col = "white", axes = FALSE)
axis(2)
axis(1, at 1:12, rownames(ap))
plot(1:12, ap[,1], col = "white", axes = FALSE)
axis(2)
axis(1, at = 1:12, rownames(ap))
plot(1:12, ap[,1], col = "white", axes = FALSE)
axis(2)
axis(1, at = 1:12, rownames(ap))
lines(1:12, ap[,1])
plot(1:12, ap[,1], col="white", axes=FALSE, ylim=range(ap))
axis(2)
axis(1, at=1:12, rownames(ap))
for (j in 1:nrow(ap))
lines(1:12, ap[,j])
text(rep(7,12),ap[7,],colnames(ap), cex=0.5)
plot(1:12, ap[,1], col="white", axes=FALSE, ylim=range(ap))
axis(2)
axis(1, at=1:12, rownames(ap))
for (j in 1:nrow(ap))
lines(1:12, ap[,j])
text(rep(7,12),ap[7,],colnames(ap), cex=1)
plot(1:12, ap[,1], col="white", axes=FALSE, ylim=range(ap))
axis(2)
axis(1, at=1:12, rownames(ap))
for (j in 1:nrow(ap))
lines(1:12, ap[,j])
text(rep(7,12),ap[7,],colnames(ap))
ap[7,]
ap
plot(ap[,1], ap[,2])
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1], ap[,2], rownames(ap))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1] + 5, ap[,2], rownames(ap))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1], ap[,2] + 5, rownames(ap))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1], ap[,2] + 2.5, rownames(ap))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1], ap[,2] + 5, rownames(ap))
plot(ap[,1], ap[,2], pch = 19, ylim = c(100, 180))
text(ap[,1], ap[,2] + 3, rownames(ap))
t(ap)
t(t(ap))
?t
t(t(ap) / apply(ap,2,sum)) * 100
sum((t(t(ap) / apply(ap,2,sum)) * 100)[,1])
perc_ap <- t(round(t(ap) / apply(ap,2,sum)) * 100)), 2)
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
perc_ap
load("~/Downloads/w4birth_dvn.RData")
head(x)
str(x)
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
per_ap
perc_ap
plot(1:12, perc_ap[,1], col = "white", axes = FALSE, ylim = range(perc_ap))
axis(2)
axis(1, at = 1:12, rownames(perc_ap))
for (j in 1:nrow(perc_ap))
lines(1:12, perc_ap[,j])
text(rep(7,12), perc_ap[7,], colnames(perc_ap))
plot(1:12, perc_ap[,1], col = "white", axes = FALSE, ylim = 15)
axis(2)
axis(1, at = 1:12, rownames(perc_ap))
for (j in 1:nrow(perc_ap))
lines(1:12, perc_ap[,j])
text(rep(7,12), perc_ap[7,], colnames(perc_ap))
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(1:12, perc_ap[,1], col = "white", axes = FALSE, ylim = 15)
axis(2)
axis(1, at = 1:12, rownames(perc_ap))
for (j in 1:nrow(perc_ap))
lines(1:12, perc_ap[,j])
text(rep(7,12), perc_ap[7,], colnames(perc_ap))
plot(1:12, perc_ap[,1], col = "white", axes = FALSE, ylim = c(0, 15))
axis(2)
axis(1, at = 1:12, rownames(perc_ap))
for (j in 1:nrow(perc_ap))
lines(1:12, perc_ap[,j])
text(rep(7,12), perc_ap[7,], colnames(perc_ap))
plot(1:12, perc_ap[,1], col = "white", axes = FALSE, ylim = c(0, 15))
axis(2)
axis(1, at = 1:12, rownames(perc_ap))
for (j in 1:nrow(perc_ap))
lines(1:12, perc_ap[,j])
text(rep(7,12), perc_ap[7,], colnames(perc_ap), cex = 0.5)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(ap), las = 2)
?las
??las
axis(2, at = 1:12, rownames(ap), las = 2)
for (i in 1:12) {
points(rep(i, 12), 1:12, pch = 19)
}
ap[,2]
mean(ap)
ap[,2]/mean(ap)
for (i in 1:12) {
points(rep(i, 12), 1:12, cex = ap[,i]/mean(ap), pch = 19)
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
for (i in 1:12) {
points(rep(i, 12), 1:12, cex = perc_ap[,i]/mean(perc_ap), pch = 19)
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
cols = matrix("blue", nrow=12, ncol=12)
cols[perc_ap > 1/12 * 100] <- "red"
for (i in 1:12) {
points(rep(i,12), 1:12, cex = perc_ap[,i] / mean(perc_ap),
pch = 19, col = cols[,i])
}
library(fivethirtyeight)
?fivethirtyeight
college_all_ages
?write.csv
write.csv(college_all_ages, "~/Desktop/college_all_ages.csv")
comic_characters
dim(comic_characters)
write.csv(comic_characters, "~/Desktop/comic_characters.csv")
write.csv(comma_survey, "~/Desktop/comma_survey.csv")
write.csv(police_killings, "~/Desktop/police_killings.csv")
write.csv(US_births_2000_2014, "~/Desktop/US_births_2000_2014.csv")
install.packages("tidyverse")
library(readr)
R11402506_SL050 <- read_csv("~/Downloads/R11402506_SL050.csv")
View(R11402506_SL050)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
quit()
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length))
abline(h = median(iris$Petal.Length))
plot(InsectSprays$count, col = "white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) text(rep(i, thisCount), 1:thisCount, thisSpray)
}
plot(InsectSprays$count, col = "white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) text(rep(i, thisCount), 1:thisCount, thisSpray)
}
abline(v=seq(0.5,72.5,by=12))
InsectSprays
plot(iris$Sepal.Length, iris$Petal.Length,
pch = 19,
col = "white")
text(iris$Sepal.Length, iris$Petal.Length, iris$Species,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = 0.5)
library(ggplot2)
g <- ggplot(iris, aes(Sepal.Length, Petal.Length, color = Species))
g + geom_point()
g + geom_jitter()
g <- ggplot(iris, aes(Sepal.Length, Petal.Length, color = Species))
install.packages("tidyverse")
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
cols = matrix("blue", nrow=12, ncol=12)
cols[perc_ap > 1/12 * 100] <- "red"
for (i in 1:12) {
points(rep(i,12), 1:12, cex = perc_ap[,i] / mean(perc_ap),
pch = 19, col = cols[,i])
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
cols = matrix("blue", nrow=12, ncol=12)
cols[perc_ap > 1/12 * 100] <- "red"
for (i in 1:12) {
points(rep(i,12), 1:12, cex = perc_ap[,i] / mean(perc_ap),
pch = 19, col = cols[,i])
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(iris$Sepal.Length, iris$Petal.Length)
?plot
?pch
plot(iris$Sepal.Length, iris$Petal.Length, pch = 13,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
??pch
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Width,col=colors,pch=19)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
plot(iris$Sepal.Length, iris$Petal.Length)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
sizes <- iris$Sepal.Width/median(iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
?abline
sizes <- iris$Sepal.Width/median(iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
abline(h = 5, v = 6)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length))
abline(h = median(iris$Petal.Length))
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
colVals <- c("red", "blue", "green")
vertVals <- tapply(iris$Sepal.Length, iris$Species, median)
horzVals <- tapply(iris$Petal.Length, iris$Species, median)
abline(v = vertVals,
col = colVals,
lty = "dashed")
abline(h = horzVals,
col = colVals,
lty = "dashed")
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
colVals <- c("red", "blue", "green")
vertVals <- tapply(iris$Sepal.Length, iris$Species, median)
horzVals <- tapply(iris$Petal.Length, iris$Species, median)
abline(v = vertVals,
col = colVals,
lty = "dashed")
abline(h = horzVals,
col = colVals,
lty = "dashed")
plot(iris$Sepal.Length, iris$Petal.Length)
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
if (i != j) plot(iris[,i], iris[,j], pch=19, cex=0.5,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
if (i == j) hist(iris[,i], main="", col = "gray")
}
}
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
plot(iris[,i], iris[,j], pch=19, cex=0.5)
}
}
qplot(carat, price, data = diamonds)
qplog(log(carat), log(price), data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x*y*z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = dsmall, colour = I("red")
)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
method = "gam", formula = y ~ s(x, bs = "cs"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), "lm")
qplot(carat, price, data = diamonds, geom = c("point", "smooth", "lm"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), method = "lm")
qplot(color, price/carat, data = diamonds, geom = "boxplot")
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 5))
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 50))
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 200))
400%6
400%%6
400%%60
install.packages(c("nycflights13", "gapminder", "Lahman"))
tidyverse_update()
library(tidyverse)
tidyverse_update()
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
geom_point(mapping = aes(x = displ, y = hwy))
swirl()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
library(datasets)
ggplot(airquality) + geom_boxplot(aes(x = Month, y = Ozone))
ggplot(airquality) + geom_boxplot(aes(group = Month, y = Ozone))
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot()
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot(group = Month)
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot(aes(group = Month))
ggplot(mpg, aes(class, drv)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point()
g + geom_point()
library(tidyverse)
g + geom_point()
g + geom_point() + facet_wrap(Species)
?facet_wrap
g + geom_point() + facet_wrap(~Species)
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm)
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm) +scale_x_log10() +
scale_y_log10()
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm) +scale_x_log10()
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm)
head(iris)
iris_tidy <- iris %>%
gather(key, Value, - Species) %>%
separate(key, c("Part", "Measure"), "\\.")
# Making iris_wide uses the same tidyr functions as above, plus the function
# spread(). First, so that we can keep track of which measures belong to which
# flower, we need to add a unique identifier in a column called Flower.
iris$Flower <- 1:nrow(iris)
iris_wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
head(iris_tidy)
head(iris_wide)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)
geom_point()
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point()
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species, nrow = 3)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species, nrow = 2)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Part)) + geom_point() + facet_grid(~Species)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_point() + facet_grid(~Species)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_boxplot()
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_boxplot() + facet_grid(~Species)
