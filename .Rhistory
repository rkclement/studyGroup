R11402506_SL050 <- read_csv("~/Downloads/R11402506_SL050.csv")
View(R11402506_SL050)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
quit()
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length))
abline(h = median(iris$Petal.Length))
plot(InsectSprays$count, col = "white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) text(rep(i, thisCount), 1:thisCount, thisSpray)
}
plot(InsectSprays$count, col = "white")
for (i in 1:nrow(InsectSprays)) {
thisCount = InsectSprays$count[i]
thisSpray = InsectSprays$spray[i]
if (thisCount > 0) text(rep(i, thisCount), 1:thisCount, thisSpray)
}
abline(v=seq(0.5,72.5,by=12))
InsectSprays
plot(iris$Sepal.Length, iris$Petal.Length,
pch = 19,
col = "white")
text(iris$Sepal.Length, iris$Petal.Length, iris$Species,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = 0.5)
library(ggplot2)
g <- ggplot(iris, aes(Sepal.Length, Petal.Length, color = Species))
g + geom_point()
g + geom_jitter()
g <- ggplot(iris, aes(Sepal.Length, Petal.Length, color = Species))
install.packages("tidyverse")
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
cols = matrix("blue", nrow=12, ncol=12)
cols[perc_ap > 1/12 * 100] <- "red"
for (i in 1:12) {
points(rep(i,12), 1:12, cex = perc_ap[,i] / mean(perc_ap),
pch = 19, col = cols[,i])
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(0,0,xlim=c(1,12),ylim=c(1,12), col="white",
axes=FALSE, main="", xlab="", ylab="")
box()
axis(1, at = 1:12, colnames(perc_ap), las = 2)
axis(2, at = 1:12, rownames(perc_ap), las = 2)
cols = matrix("blue", nrow=12, ncol=12)
cols[perc_ap > 1/12 * 100] <- "red"
for (i in 1:12) {
points(rep(i,12), 1:12, cex = perc_ap[,i] / mean(perc_ap),
pch = 19, col = cols[,i])
}
perc_ap <- round(t(t(ap) / apply(ap, 2, sum) * 100), 2)
plot(iris$Sepal.Length, iris$Petal.Length)
?plot
?pch
plot(iris$Sepal.Length, iris$Petal.Length, pch = 13,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
??pch
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Width,col=colors,pch=19)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
plot(iris$Sepal.Length, iris$Petal.Length)
species<-unique(iris$Species)
colVals<-c("purple","blue","red")
colors<-colVals[match(iris$Species),species]
plot(iris$Sepal.Length, iris$Petal.Length,col=colors,pch=19)
sizes <- iris$Sepal.Width/median(iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
?abline
sizes <- iris$Sepal.Width/median(iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
abline(h = 5, v = 6)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")),
cex = sizes)
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length))
abline(h = median(iris$Petal.Length))
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
colVals <- c("red", "blue", "green")
vertVals <- tapply(iris$Sepal.Length, iris$Species, median)
horzVals <- tapply(iris$Petal.Length, iris$Species, median)
abline(v = vertVals,
col = colVals,
lty = "dashed")
abline(h = horzVals,
col = colVals,
lty = "dashed")
plot(iris$Sepal.Length,iris$Petal.Length, pch = 19,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
colVals <- c("red", "blue", "green")
vertVals <- tapply(iris$Sepal.Length, iris$Species, median)
horzVals <- tapply(iris$Petal.Length, iris$Species, median)
abline(v = vertVals,
col = colVals,
lty = "dashed")
abline(h = horzVals,
col = colVals,
lty = "dashed")
plot(iris$Sepal.Length, iris$Petal.Length)
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
if (i != j) plot(iris[,i], iris[,j], pch=19, cex=0.5,
col = ifelse(iris$Species == "setosa", "red",
ifelse(iris$Species == "versicolor", "blue", "green")))
if (i == j) hist(iris[,i], main="", col = "gray")
}
}
par(mfrow=c(4,4))
par(mar=c(1,1,1,1))
par(oma=c(2,2,2,2))
for (i in 1:4) {
for (j in 1:4) {
plot(iris[,i], iris[,j], pch=19, cex=0.5)
}
}
qplot(carat, price, data = diamonds)
qplog(log(carat), log(price), data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x*y*z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = dsmall, colour = I("red")
)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
method = "gam", formula = y ~ s(x, bs = "cs"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), "lm")
qplot(carat, price, data = diamonds, geom = c("point", "smooth", "lm"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), method = "lm")
qplot(color, price/carat, data = diamonds, geom = "boxplot")
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 5))
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 50))
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 200))
400%6
400%%6
400%%60
install.packages(c("nycflights13", "gapminder", "Lahman"))
tidyverse_update()
library(tidyverse)
tidyverse_update()
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
geom_point(mapping = aes(x = displ, y = hwy))
swirl()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
library(datasets)
ggplot(airquality) + geom_boxplot(aes(x = Month, y = Ozone))
ggplot(airquality) + geom_boxplot(aes(group = Month, y = Ozone))
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot()
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot(group = Month)
ggplot(airquality, aes(Month, Ozone)) + geom_boxplot(aes(group = Month))
ggplot(mpg, aes(class, drv)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point()
g + geom_point()
library(tidyverse)
g + geom_point()
g + geom_point() + facet_wrap(Species)
?facet_wrap
g + geom_point() + facet_wrap(~Species)
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm)
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm) +scale_x_log10() +
scale_y_log10()
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm) +scale_x_log10()
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm)
head(iris)
iris_tidy <- iris %>%
gather(key, Value, - Species) %>%
separate(key, c("Part", "Measure"), "\\.")
# Making iris_wide uses the same tidyr functions as above, plus the function
# spread(). First, so that we can keep track of which measures belong to which
# flower, we need to add a unique identifier in a column called Flower.
iris$Flower <- 1:nrow(iris)
iris_wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
head(iris_tidy)
head(iris_wide)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)
geom_point()
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point()
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species, nrow = 3)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species, nrow = 2)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Part)) + geom_point() + facet_grid(~Species)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_point() + facet_grid(~Species)
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_boxplot()
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_boxplot() + facet_grid(~Species)
library(tidyverse)
library(data.table)
install.packages("data.table")
library(data.table)
usa <- fread("~/Desktop/usa_00006.csv")
head(usa)
summaris(usa, OCC)
summarise(usa, OCC)
group_by(usa, OCC) %>% count()
?count
group_by(usa, STATEFIP) %>% count(OCC)
usa_lawyer <- usa[usa$OCC == 2100]
dim(usa_lawyer)
dim(usa)
dim(usa)[1]
dim(usa)[1] - dim(usa_lawyer)[1]
dim(usa_lawyer)[1]/dim(usa)[1] * 100
dim(usa_lawyer)[1]/dim(usa)[1]
usa_lawyer %>% count(SEX)
usa_lawyer %>% group_by(STATEFIP) %>% count(SEX)
usa_lawyer %>% table(STATEFIP, SEX)
usa_lawyer %>% table(.$STATEFIP, .$SEX)
table(usa_lawyer$STATEFIP, usa_lawyer$SEX)
table(usa_lawyer$STATEFIP, usa_lawyer$SEX)[1,]
table(usa_lawyer$STATEFIP, usa_lawyer$SEX)[,2]
stateLawyer <- table(usa_lawyer$STATEFIP, usa_lawyer$SEX)
class(stateLawyer)
stateLawyer <- as.data.frame(stateLawyer)
stateLawyer
colnames(stateLawyer)
cols <- c("State", "Sex", "Lawyers")
?colnames
colnames(stateLawyer) <- cols
stateLawyer
ggplot(stateLawyer, aes(state, Lawyers, col = Sex))
ggplot(stateLawyer, aes(state, Lawyers, col = Sex)) + geom_bar()
ggplot(stateLawyer, aes(state, Lawyers, color = Sex)) + geom_bar()
ggplot(stateLawyer, aes(state, Lawyers, color = Sex)) + geom_dotplot()
ggplot(stateLawyer, aes(State, Lawyers, color = Sex)) + geom_dotplot()
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_dotplot()
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_dotplot(stat = "identity")
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_bar(stat = "identity")
?order
stateLawyer <- arrange(stateLawyer, desc(Lawyers))
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_bar(stat = "identity")
class(stateLawyer$State)
stateLawyer$State <- factor(stateLawyer$State, levels = arrange(stateLawyer, desc(Lawyers)))
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_bar(stat = "identity")
stateLawyer
stateLawyer <- table(usa_lawyer$STATEFIP, usa_lawyer$SEX)
colnames(stateLawyer) <- c("State", "Sex", "Lawyers")
stateLawyer
stateLawyer <- as.data.frame(stateLawyer)
colnames(stateLawyer) <- c("State", "Sex", "Lawyers")
stateLawyer
stateLawyer$State <- factor(stateLawyer$State, levels = stateLawyer$State[order(stateLawyer$Lawyers)])
stateLawyer
order(stateLawyer$Lawyers)
stateLawyer[order(stateLawyer$Lawyers, decreasing = TRUE)]
stateLawyer$State[order(stateLawyer$Lawyers, decreasing = TRUE)]
factor(stateLawyer$State, levels = stateLawyer$State[order(stateLawyer$Lawyers, decreasing = TRUE)])
?factor
?order
factor(stateLawyer$State, levels = stateLawyer$State[order(stateLawyer$Lawyers, stateLawyer$Sex, decreasing = TRUE)])
factor(stateLawyer$State, levels = rev(unique(stateLawyer$Lawyers)), ordered = TRUE)
?rev
factor(stateLawyer$State, levels = sort(unique(stateLawyer$Lawyers)), ordered = TRUE)
stateLawyer
stateLawyer <- spread(stateLawyer, Sex, Lawyers)
?spread
spread(stateLawyer, Sex, Lawyers)
stateLawyer
colnames(stateLawyer) <- c("State", "Male_Lawyers", "Female_Lawyers")
stateLawyer <- mutate(stateLawyer, Total = Male_Lawyers + Female_Lawyers)
stateLawyer
stateLawyer$State <- factor(stateLawyer$State, levels = stateLawyer$State[order(stateLawyer$Total)])
stateLawyer
ggplot(stateLawyer, aes(State, Lawyers, fill = Sex)) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(State, Total)) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(State, Female_Lawyers/Total)) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(State, Female_Lawyers/Total), color = Total) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(State, Female_Lawyers/Total), fill = Total) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(State, Female_Lawyers/Total), fill = Male_Lawyers) + geom_bar(stat = "identity")
ggplot(stateLawyer, aes(Female_Lawyers)) + geom_boxplot()
ggplot(stateLawyer, aes(Female_Lawyers)) + geom_boxplot(aes(group = State))
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point() + facet_wrap(~Species, nrow = 2)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point()
ggplot(iris_tidy, aes(x = Part, y = Value, col = Measure)) + geom_point() + facet_grid(~Species)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part, shape = Species)) + geom_point()
str(diamonds)
head(diamonds)
ggplot(diamonds, aes(cut)) + geom_bar()
ggplot(diamonds, aes(cut)) + stat_count()
cut_freq <- count(diamonds, cut)
cut_freq
ggplot(diamonds, aes(cut)) + geom_bar(stat = "identity")
ggplot(diamonds, aes(n)) + geom_bar(stat = "identity")
ggplot(cut_freq, aes(n)) + geom_bar(stat = "identity")
ggplot(cut_freq, aes(cut, n)) + geom_bar(stat = "identity")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar()
ggplot(diamonds, aes(cut)) + geom_bar(position = "dodge")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "dodge")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "fill")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "identity", alpha = 0.2)
ggplot(diamonds, aes(price, clarity)) + geom_point()
ggplot(diamonds, aes(price, carat)) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.5)
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.2)
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.2) + geom_smooth()
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.2) + geom_smooth(method = "lm")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar() + coord_polar()
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "dodge") + coord_polar()
ggplot(diamonds, aes(cut)) + geom_bar() + coord_polar()
ggplot(diamonds, aes(cut, color = cut)) + geom_bar() + coord_polar()
ggplot(diamonds, aes(cut, fill = cut)) + geom_bar() + coord_polar()
ggplot(diamonds, aes(cut, fill = cut)) + geom_bar() + coord_flip()
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.2) + geom_smooth(aes(color = clarity))
ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.2) + geom_smooth(aes(color = clarity), se = FALSE, method = "lm")
ggplot(diamonds, aes(carat, price)) + geom_point(aes(color = clarity), alpha = 0.2) + geom_smooth(aes(color = clarity))
ggplot(diamonds, aes(carat, price)) + geom_smooth(aes(color = clarity))
install.packages("tidyverse")
library(tidyverse)
getwd()
2 + 2
2 * 2
2.0/2.1
2^2*((3/4) + 6)
3%%2
x**2
# Assign a value to a variable
x <- 3
x**2
y <- x**2
x + y
x <- c(3, 4, 6, 7, 2)
x
x <- c(3, 4, 6, 7, 2)
x * 3
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 2)
x
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 3)
x
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 6)
x
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 7)
x
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 2)
as.data.frame(x)
x <- matrix(c(3, 4, 6, 7, 2, 1), ncol = 2)
x*3
as.data.frame(x) * 3
str(iris)
head(iris)
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length)
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
pch = 19,
cex = iris$Sepal.Width/median(iris$Sepal.Width))
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
pch = 19,
xlab = "Sepal Length",
ylab = "Petal Length",
main = "Iris Species Sepal Length vs Petal Length")
legend(7.5, 2.5,
c("Setosa", "Virginica", "Versicolor"),
pch = 19,
col = c("black", "red", "green"))
abline(v = median(iris$Sepal.Length), h = median(iris$Petal.Length) )
text(4.5, median(iris$Petal.Length) + 0.15,
paste("Median Petal Length =", median(iris$Petal.Length)),
cex = 0.7)
text(median(iris$Sepal.Length) + 0.35, 2.5,
paste("Median Sepal Length =", median(iris$Sepal.Length)),
cex = 0.7)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width, pch = 19)
points(iris$Petal.Length, iris$Petal.Width, pch = 19, col = "red")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() +
geom_point(aes(x = Petal.Length, y = Petal.Width), col = "red")
g <- ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species))
g + geom_point()
g + geom_point() + facet_wrap(~Species)
g + geom_point() + facet_wrap(~Species) + stat_smooth(method = lm)
g + geom_point() + stat_smooth(method = lm)
g + geom_point() + stat_smooth(method = lm, se = FALSE)
g + geom_point() + stat_smooth()
iris_tidy <- iris %>%
gather(key, Value, - Species) %>%
separate(key, c("Part", "Measure"), "\\.")
# Making iris_wide uses the same tidyr functions as above, plus the function
# spread(). First, so that we can keep track of which measures belong to which
# flower, we need to add a unique identifier in a column called Flower.
iris$Flower <- 1:nrow(iris)
iris_wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
head(iris)
head(iris_wide)
head(iris_tidy)
ggplot(iris_wide, aes(x = Length, y = Width, col = Part)) + geom_point()
str(diamonds)
head(diamonds)
ggplot(diamonds, aes(cut)) + geom_bar()
ggplot(diamonds, aes(cut)) + stat_count()
cut_freq <- count(diamonds, cut)
cut_freq
ggplot(cut_freq, aes(cut, n)) + geom_bar(stat = "identity")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar()
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "dodge")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar(position = "identity")
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar() + coord_flip()
ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar() + coord_polar()
library(tidyverse)
library(tidyverse)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() +
geom_point(aes(x = Petal.Length, y = Petal.Width), col = "red")
g + geom_point() + stat_smooth()
g + geom_point() + stat_quantile()
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("quantreg")
library(quantreg)
g + geom_point() + stat_quantile()
g + geom_point() + stat_smooth(method = "lm", formula = y ~ x + I(x^2))
g + geom_point() + stat_smooth(method = "lm", formula = y ~ x)
g + geom_point() + stat_smooth(method = "lm", formula = y ~ x + I(x^3))
library(readr)
usa <- read_csv("~/Desktop/usa_00006.csv")
head(usa)
dim(usa)
